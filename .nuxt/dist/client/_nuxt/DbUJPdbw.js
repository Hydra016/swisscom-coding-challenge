import{a as y,J as p,a1 as m,N as d}from"./RPqdvl64.js";const v="$s";function l(...n){const a=typeof n[n.length-1]=="string"?n.pop():void 0;typeof n[0]!="string"&&n.unshift(a);const[s,i]=n;if(!s||typeof s!="string")throw new TypeError("[nuxt] [useState] key must be a string: "+s);if(i!==void 0&&typeof i!="function")throw new Error("[nuxt] [useState] init must be a function: "+i);const f=v+s,u=y(),r=p(u.payload.state,f);if(r.value===void 0&&i){const o=i();if(m(o))return u.payload.state[f]=o,o;r.value=o}return r}const S=()=>{const n=l("isCartOpen",()=>!1),a=l("cartItems",()=>{const t=localStorage.getItem("cartItems");return t?JSON.parse(t):[]}),s=()=>{n.value=!n.value},i=()=>{n.value=!0},f=t=>{const e=a.value.find(c=>c.id===t.id);e?e.quantity++:a.value.push({...t,quantity:1})},u=t=>{a.value=a.value.filter(e=>e.id!==t)},r=t=>{const e=a.value.find(c=>c.id===t);e&&e.quantity++},o=t=>{const e=a.value.find(c=>c.id===t);e&&e.quantity>1?e.quantity--:e&&u(t)};return d(a,t=>{localStorage.setItem("cartItems",JSON.stringify(t))},{deep:!0}),{cartItems:a,addToCart:f,deleteItem:u,incrementItemQuantity:r,decrementItemQuantity:o,toggleCart:s,openCart:i,isCartOpen:n}};export{S as u};
